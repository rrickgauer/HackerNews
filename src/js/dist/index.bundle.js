(function(){'use strict';class ApiWrapper
{
    static async getTopStoriesIds() {
        let response = await fetch(ApiWrapper.URLS.TOP);
        return response.json();
    }

    static async getStory(id) {
        const urlStory = ApiWrapper.getStoryUrl(id);
        const response = await fetch(urlStory);
        return response.json();
    }


    static getStoryUrl(id) {
        let url = `${ApiWrapper.URLS.STORY}${id}.json`;
        return url;
    }

    static getUserUrl(userID) {
        return `${ApiWrapper.URL_USER_BASE}${userID}`;
    }

}



ApiWrapper.URL_BASE      = 'https://hacker-news.firebaseio.com/v0/';
ApiWrapper.URL_USER_BASE = 'https://news.ycombinator.com/user?id=';

ApiWrapper.URLS = {
    TOP  : ApiWrapper.URL_BASE + 'topstories.json',
    STORY: ApiWrapper.URL_BASE + 'item/',
};const DateTime = luxon.DateTime;class Dates
{   
    /**
     * Returns the time difference between a datetime and now.
     * 
     * @param {Constants.DateTime} a_dtDateTime - the datetime object
     * 
     * @returns {Object} diff - The point generated by the factory.
     * @returns {number} diff.years - Difference in years
     * @returns {number} diff.months - Difference in months
     * @returns {number} diff.days - Difference in days
     * @returns {number} diff.hours - Difference in hours
     * @returns {number} diff.minutes - Difference in minutes
     * @returns {number} diff.seconds - Difference in seconds
     */
    static getDiffNow(a_dtDateTime) {
        const diff = DateTime.now().diff(a_dtDateTime, Dates.DIFF_UNITS);
        return diff.values;
    }

    /**
     * Generate the date difference display string.
     */
    static getDiffDisplayString(a_dtDiff) {
        let numUnits = null;
        let unitType = null;
        
        if (a_dtDiff.days > 0) {
            numUnits = a_dtDiff.days;
            unitType = 'day';
        } else if (a_dtDiff.hours > 0) {
            numUnits = a_dtDiff.hours;
            unitType = 'hour';
        } else if (a_dtDiff.minutes > 1) {
            numUnits = a_dtDiff.minutes;
            unitType = 'minute';
        } 
        
        // item was created less than a minute ago
        if (null in [numUnits, unitType]) {
            return 'just now';
        }

        // append an s if there is more than 1 of the units
        if (numUnits > 1) {
            unitType += 's';
        }

        // throw them all together
        let result = `${numUnits} ${unitType} ago`;

        return result;
    }

}

/** Time difference units */
Dates.DIFF_UNITS = ["years", "months", "days", "hours", "minutes", "seconds"];class StoryComp
{

    constructor(a_apiResponse) {
        this.by          = null;
        this.descendants = null;
        this.id          = null;
        this.kids        = [];
        this.score       = null;
        this.time        = null;
        this.title       = null;
        this.type        = null;
        this.url         = null;

        for (const key of Object.keys(a_apiResponse)) {
            this[key] = a_apiResponse[key];
        }

        this.siteUrl = `https://news.ycombinator.com/item?id=${this.id}`;
        
        this.dt = DateTime.fromSeconds(this.time);
        this.dtDiff = Dates.getDiffNow(this.dt);

        this.getCardHtml = this.getCardHtml.bind(this);
        this.getListItemHtml = this.getListItemHtml.bind(this);
    }

    /**
     * Generate the card html
     * @returns Story card html string
     */
    getCardHtml() {
        const url = this.url == null ? this.siteUrl : this.url;
        const dtDisplay = Dates.getDiffDisplayString(this.dtDiff);

        // add commas to score and descendants
        const scoreDisplay = this.score.toLocaleString();
        const descendantsDisplay = this.descendants.toLocaleString();

        let html = `
        <div class="${StoryComp.StoryItemClass} card ${StoryComp.StoryCardClass} custom-shadow" data-id=${this.id}>
            <div class="card-body">
                <h5 class="card-title"><a href="${url}" target="_blank" class="card-story-link">${this.title}</a></h5>
                <p class="text-muted"><small>${dtDisplay}</small></p>
                <p class="text-muted"><i class='bx bxs-user'></i>&nbsp;${this.by}</p>
            </div>
            <div class="card-footer px-4">
                <div class="d-flex align-baseline justify-content-between">
                    <span><i class='bx bx-like'></i>&nbsp;${scoreDisplay}</span>
                    <span><i class='bx bx-comment-detail'></i>&nbsp;${descendantsDisplay}</span>
                </div>
            </div>
        </div>`;

        return html;
    }

    getListItemHtml() {
        const url = this.url == null ? this.siteUrl : this.url;
        const dtDisplay = Dates.getDiffDisplayString(this.dtDiff);

        let html = `
        <li class="${StoryComp.StoryItemClass} ${StoryComp.StoryListItemClass} list-group-item" data-id=${this.id}>
            <h5 class="card-title"><a href="${url}" target="_blank" class="card-story-link">${this.title}</a></h5>
            <p class="text-muted"><small>${dtDisplay}</small></p>
            <p class="text-muted"><i class='bx bxs-user'></i>&nbsp;${this.by}</p>
            <div class="d-flex align-baseline">
                <span class="mr-3"><i class='bx bx-like'></i>&nbsp;${this.score}</span>
                <span><i class='bx bx-comment-detail'></i>&nbsp;${this.descendants}</span>
            </div>
        </li>`;

        return html;
    }
}



StoryComp.StoryItemClass     = 'story-item';
StoryComp.StoryCardClass     = 'story-item-card';
StoryComp.StoryListItemClass = 'story-item-list-item';/**
 * This class is responsible for retrieving and displaying all the stories.
 */
class Stories
{
    /**
     * Constructor
     * @param {string} a_strDisplayElement css selector of where to place all the story cards
     */
    constructor(a_strDisplayElement) {
        this.displayElement = a_strDisplayElement;
        this.stories = [];
        this.displayType = Stories.DISPLAY_TYPES.Gallery;

        this.fetchTopStories          = this.fetchTopStories.bind(this);
        this.fetchStories             = this.fetchStories.bind(this);
        this.sortStoriesByScore       = this.sortStoriesByScore.bind(this);
        this.sortStoriesByDescendants = this.sortStoriesByDescendants.bind(this);
        this.sortStoriesByTitle       = this.sortStoriesByTitle.bind(this);
        this.displayStories           = this.displayStories.bind(this);
        this.displayStoriesGallery    = this.displayStoriesGallery.bind(this);
        this.displayStoriesList       = this.displayStoriesList.bind(this);

    }


    /**
     * Fetch the stories from the hackernews api 
     * @param {Stories.SortingTypes} a_enumSortingType How should the stories be sorted once they have been fetched
     */
    async fetchTopStories(a_enumSortingType = Stories.SORTING_TYPES.Default) {
        const topStoriesList = await ApiWrapper.getTopStoriesIds();
        this.fetchStories(topStoriesList, a_enumSortingType);
    }

    /**
     * Fetch the stories api responses using the given sorting types 
     * @param {list[number]} a_listStoryIDs list of story ids
     * @param {number} a_enumSortingType sorting type
     */
    async fetchStories(a_listStoryIDs, a_enumSortingType) {
        const self = this;
        const storyPromises = [];

        for (const storyID of a_listStoryIDs) {
            const storyResponse = ApiWrapper.getStory(storyID);
            storyPromises.push(storyResponse);
        }

        const storyPromisesResponses = await Promise.all(storyPromises);

        this.stories = [];      // clear out the existing stories

        // weed out all of the non stories
        for (const story of storyPromisesResponses) {
            if (story.type == Stories.STORY_TYPES.STORY) {
                this.stories.push(story);
            }
        }

        switch(a_enumSortingType) {
            case Stories.SORTING_TYPES.Score:
                self.sortStoriesByScore(); 
                break;
            case Stories.SORTING_TYPES.Descendants:
                self.sortStoriesByDescendants(); 
                break;
            case Stories.SORTING_TYPES.Title:
                self.sortStoriesByTitle(); 
                break;
        }

        this.displayStories();
    }


    /**
     * Sort the stories by their score
     */
    sortStoriesByScore() {

        this.stories = this.stories.sort(function(a, b) {
            return (a.score > b.score ? -1 : 1);
        });
    }

    /**
     * Sort the stories by the number of comments
     */
    sortStoriesByDescendants() {
        this.stories = this.stories.sort(function(a, b) {
            return (a.descendants > b.descendants ? -1 : 1);
        });
    }

    /**
     * Sort the stories by the title
     */
    sortStoriesByTitle() {
        this.stories = this.stories.sort(function(a, b) {
            const titleA = a.title.toUpperCase();
            const titleB = b.title.toUpperCase();

            return (titleA < titleB ? -1 : 1);
        });
    }

    /**
     * Display the stories on the page
     */
    displayStories() {

        if (this.displayType == Stories.DISPLAY_TYPES.Gallery) {
            this.displayStoriesGallery();
        } else {
            this.displayStoriesList();
        }

    }

    /**
     * Display the stories on the page AS A GALLERY
     */
    displayStoriesGallery() {
        let html = '<div class="card-deck">';
        let count = 0;

        for (const story of this.stories) {
            if (count == 3) {
                html += '</div><div class="card-deck">';
                count = 0;
            }

            const storyCard = new StoryComp(story);
            html += storyCard.getCardHtml();

            count++;
        }

        html += '</div>';

        $(this.displayElement).html(html);
    }

    /**
     * Display the stories on the page AS A LIST
     */
    displayStoriesList() {
        let html = `<ul class="list-group">`;

        for (const story of this.stories) {
            const storyCard = new StoryComp(story);
            html += storyCard.getListItemHtml();
        }

        html += '</ul>';

        $(this.displayElement).html(html);
    }
}



Stories.DISPLAY_TYPES = {
    Gallery: 'gallery',
    List: 'list',
};


Stories.SORTING_TYPES = {
    Default: 0,
    Score: 1,
    Descendants: 2,
    Title: 3,
};

Stories.STORY_TYPES = {
    JOB: 'job',
    STORY: 'story',
    COMMENT: 'comment',
    POLL: 'poll',
    POLLOPT: 'pollopt',
};class Utilities 
{
    
    /**************************************************
    Enable the scroll button on the current page.
    ***************************************************/
    static enableJumpButton() {
        const className = '.btn-scroll-top';

        $(className).on('click', function() {
            document.body.scrollTop = 0; // For Safari
            document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
        });
        
        const scrollBtn = $(className);
        
        $(window).on('scroll', function() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                $(scrollBtn).removeClass('d-none');
            } else {
                $(scrollBtn).addClass('d-none');
            }
        });
    }
}const eSortingSelect = '#stories-sort-option';
const eStoriesContainer = '#stories-container';
const eStoryItemClass = `.${StoryComp.StoryItemClass}`;

const eStoriesBsContainer = '#stories-bs-container';
const eWidescreenCheckboxInput = '#widescreen-checkbox-input';

const eViewSelection = 'stories-display-option';
const mStories = new Stories(eStoriesContainer);

/**************************************************
Main logic
***************************************************/
$(document).ready(function() {
    showStoriesContainerSpinner();
    
    mStories.fetchTopStories(Stories.SORTING_TYPES.Default);
    
    addEventListeners();
    
    Utilities.enableJumpButton();
});

/**************************************************
Add all the event listeners
***************************************************/
function addEventListeners() {
    $(eSortingSelect).on('change', function() {
        updateStorySorting();
    });

    $('body').on('click', eStoryItemClass, function(e) {
        gotoStory(e);
    });

    $(`input[name='${eViewSelection}']`).on('change', function(e) {
        updateStoriesView();
    });

    $(eWidescreenCheckboxInput).on('change', function(e) {
        toggleWideScreen();
    });
}

/**************************************************
Update the stories sorting
***************************************************/
function updateStorySorting() {
    const newSortingValue = parseInt($(eSortingSelect).find('option:checked').val());
    mStories.displayType = getStoriesViewInputValue();
    mStories.fetchTopStories(newSortingValue);
    showStoriesContainerSpinner();
}

/**************************************************
Show the spinner in the stories container
***************************************************/
function showStoriesContainerSpinner() {
    let html = `
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border text-primary mt-5" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>`;

    $(eStoriesContainer).html(html);
}

/**************************************************
Depending on which part of the story card the user clicked,
go to either the comments section page, or the story url.
***************************************************/
function gotoStory(e) {
    if (e.target.className == 'card-story-link') {
        return;
    }

    const card = $(e.target).closest(eStoryItemClass);
    const storyID = $(card).attr('data-id');

    const url = `story.html?storyID=${storyID}`;
    window.open(url, "_blank");
}

/**************************************************
Update the story elements view (gallery or list).
***************************************************/
function updateStoriesView() {
    showStoriesContainerSpinner();
    mStories.displayType = getStoriesViewInputValue();
    mStories.displayStories();
}

/**************************************************
Get the value of the checked stories view radio option.
***************************************************/
function getStoriesViewInputValue() {
    return $(`input[name='${eViewSelection}']:checked`).val();
}


function toggleWideScreen() {
    $(eStoriesBsContainer).toggleClass('container-fluid').toggleClass('container');
}})();//# sourceMappingURL=index.bundle.js.map
