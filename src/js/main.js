function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}class ApiWrapper{constructor(){}static async getTopStoriesIds(){let response=await fetch(ApiWrapper.URLS.TOP);return response.json()}static async getStory(id){const urlStory=ApiWrapper.getStoryUrl(id);const response=await fetch(urlStory);return response.json()}static getStoryUrl(id){let url=`${ApiWrapper.URLS.STORY}${id}.json`;return url}static getUserUrl(userID){return`${ApiWrapper.URL_USER_BASE}${userID}`}}_defineProperty(ApiWrapper,"URL_BASE","https://hacker-news.firebaseio.com/v0/");_defineProperty(ApiWrapper,"URL_USER_BASE","https://news.ycombinator.com/user?id=");_defineProperty(ApiWrapper,"URLS",{TOP:ApiWrapper.URL_BASE+"topstories.json",STORY:ApiWrapper.URL_BASE+"item/"});
class Comment{constructor(a_oApiResponse){this.by=null;this.id=null;this.kids=null;this.parent=null;this.text=null;this.time=null;this.type=null;this.dt=null;for(const key of Object.keys(this)){if(a_oApiResponse[key]!=undefined){this[key]=a_oApiResponse[key]}}this.dt=DateTime.fromSeconds(this.time);this.dtDiff=Dates.getDiffNow(this.dt)}getHtml(){const self=this;const userUrl=ApiWrapper.getUserUrl(self.by);const userUrlDisplay=`<a class="text-reset" href=${userUrl}>${self.by}</a>`;const dateDisplay=Dates.getDiffDisplayString(this.dtDiff);const kidsCommentsDisplay=this.getChildrenHtml();const displayText=self.formatText();console.log(self.text);let html=`<hr>
        <li class="comment-item">
            <div class="d-flex">
                <p class="comment-item-meta">
                    <small class="text-muted">
                        <span>${userUrlDisplay} &#183; ${dateDisplay}</span> &#183; 
                        <a href="#" class="text-reset comment-item-btn-toggle-thread">Hide</a>
                    </small>
                </p>
            </div>

            <div class="comment-item-thread">
                <div class="comment-item-text">${displayText}</div>
                <ul class="list-comments list-unstyled">${kidsCommentsDisplay}</ul>
            </div>
        </li>`;return html}getChildrenHtml(){let kidsCommentsHtml="";if(this.kids==null){return kidsCommentsHtml}for(const kid of this.kids){const kidComment=new Comment(kid);kidsCommentsHtml+=kidComment.getHtml()}return kidsCommentsHtml}/**
     * Wraps the first section of the comment text in a <p> tag.
     */formatText(){if(this.text==null){return this.text}// get the index of the first p tag
const index=this.text.indexOf("<p>");// split up the string where the tag starts
const startText=this.text.substring(0,index);const endText=this.text.substring(index);// wrap the initial section in a p tag
const outText=`<p>${startText}</p>${endText}`;return outText}}
const DateTime=luxon.DateTime;
function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}class Dates{/** Time difference units */ /**
     * Returns the time difference between a datetime and now.
     * 
     * @param {Constants.DateTime} a_dtDateTime - the datetime object
     * 
     * @returns {Object} diff - The point generated by the factory.
     * @returns {number} diff.years - Difference in years
     * @returns {number} diff.months - Difference in months
     * @returns {number} diff.days - Difference in days
     * @returns {number} diff.hours - Difference in hours
     * @returns {number} diff.minutes - Difference in minutes
     * @returns {number} diff.seconds - Difference in seconds
     */static getDiffNow(a_dtDateTime){const diff=DateTime.now().diff(a_dtDateTime,Dates.DIFF_UNITS);return diff.values}/**
     * Generate the date difference display string.
     */static getDiffDisplayString(a_dtDiff){let numUnits=null;let unitType=null;if(a_dtDiff.days>0){numUnits=a_dtDiff.days;unitType="day"}else if(a_dtDiff.hours>0){numUnits=a_dtDiff.hours;unitType="hour"}else if(a_dtDiff.minutes>1){numUnits=a_dtDiff.minutes;unitType="minute"}// item was created less than a minute ago
if(null in[numUnits,unitType]){return"just now"}// append an s if there is more than 1 of the units
if(numUnits>1){unitType+="s"}// throw them all together
let result=`${numUnits} ${unitType} ago`;return result}}_defineProperty(Dates,"DIFF_UNITS",["years","months","days","hours","minutes","seconds"]);
function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}/**
 * This class is responsible for retrieving and displaying all the stories.
 */class Stories{/**
     * Constructor
     * @param {string} a_strDisplayElement css selector of where to place all the story cards
     */constructor(a_strDisplayElement){this.displayElement=a_strDisplayElement;this.stories=[];this.displayType=Stories.DISPLAY_TYPES.Gallery}/**
     * Fetch the stories from the hackernews api 
     * @param {Stories.SortingTypes} a_enumSortingType How should the stories be sorted once they have been fetched
     */async fetchTopStories(a_enumSortingType=Stories.SORTING_TYPES.Default){const topStoriesList=await ApiWrapper.getTopStoriesIds();this.fetchStories(topStoriesList,a_enumSortingType)}/**
     * Fetch the stories api responses using the given sorting types 
     * @param {list[number]} a_listStoryIDs list of story ids
     * @param {number} a_enumSortingType sorting type
     */async fetchStories(a_listStoryIDs,a_enumSortingType){const self=this;const storyPromises=[];for(const storyID of a_listStoryIDs){const storyResponse=ApiWrapper.getStory(storyID);storyPromises.push(storyResponse)}const storyPromisesResponses=await Promise.all(storyPromises);this.stories=[];// clear out the existing stories
// weed out all of the non stories
for(const story of storyPromisesResponses){if(story.type==Stories.STORY_TYPES.STORY){this.stories.push(story)}}switch(a_enumSortingType){case Stories.SORTING_TYPES.Score:self.sortStoriesByScore();break;case Stories.SORTING_TYPES.Descendants:self.sortStoriesByDescendants();break;case Stories.SORTING_TYPES.Title:self.sortStoriesByTitle();break;}this.displayStories()}/**
     * Sort the stories by their score
     */sortStoriesByScore(){this.stories=this.stories.sort(function(a,b){return a.score>b.score?-1:1})}/**
     * Sort the stories by the number of comments
     */sortStoriesByDescendants(){this.stories=this.stories.sort(function(a,b){return a.descendants>b.descendants?-1:1})}/**
     * Sort the stories by the title
     */sortStoriesByTitle(){this.stories=this.stories.sort(function(a,b){const titleA=a.title.toUpperCase();const titleB=b.title.toUpperCase();return titleA<titleB?-1:1})}/**
     * Display the stories on the page
     */displayStories(){if(this.displayType==Stories.DISPLAY_TYPES.Gallery){this.displayStoriesGallery()}else{this.displayStoriesList()}}/**
     * Display the stories on the page AS A GALLERY
     */displayStoriesGallery(){let html="<div class=\"card-deck\">";let count=0;for(const story of this.stories){if(count==3){html+="</div><div class=\"card-deck\">";count=0}const storyCard=new StoryComp(story);html+=storyCard.getCardHtml();count++}html+="</div>";$(this.displayElement).html(html)}/**
     * Display the stories on the page AS A LIST
     */displayStoriesList(){let html=`<ul class="list-group">`;for(const story of this.stories){const storyCard=new StoryComp(story);html+=storyCard.getListItemHtml()}html+="</ul>";$(this.displayElement).html(html)}}_defineProperty(Stories,"DISPLAY_TYPES",{Gallery:"gallery",List:"list"});_defineProperty(Stories,"SORTING_TYPES",{Default:0,Score:1,Descendants:2,Title:3});_defineProperty(Stories,"STORY_TYPES",{JOB:"job",STORY:"story",COMMENT:"comment",POLL:"poll",POLLOPT:"pollopt"});
class StoryComments{/**
     * @constructor
     * @param {number} a_iStoryID - story id
     */constructor(a_iStoryID){this.comments={};this.storyID=a_iStoryID}/**
     * Retrieve the story data
     * 
     * @param {number} a_iStoryID - story id
     */async fetchStoryData(){// fetch the story metadata
const storyApiResponse=await ApiWrapper.getStory(this.storyID);const storyComp=new StoryComp(storyApiResponse);// display the metadata
this.displayStoryMetadata(storyComp);// fetch all the story comments
this.comments=storyComp;await this.fetchAllComments(this.comments);this.comments=this.comments.kids;// display the story comments
this.displayComments()}/**
     * Display story metadata on the page
     * 
     * @param {StoryComp} a_oStoryMetadata - Story comp object
     */displayStoryMetadata(a_oStoryMetadata){$("title").text(a_oStoryMetadata.title)}/**
     * Display the top level comments  
     * 
     * @param {StoryComp} storyComp the story
     */async fetchAllComments(storyComp){if(!storyComp.hasOwnProperty("kids")){return}const promiseList=[];for(const commentID of storyComp.kids){promiseList.push(ApiWrapper.getStory(commentID))}storyComp.kids=await Promise.all(promiseList);for(let count=0;count<storyComp.kids.length;count++){await this.fetchAllComments(storyComp.kids[count])}}/**
     * Display the comments
     */displayComments(){let html="";for(const comment of this.comments){const commentObj=new Comment(comment);html+=commentObj.getHtml()}// display the html
// make all links found within the comments section open a new tab
$("#comments-list").html(html).find("a").attr("target","_blank")}}
function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}class StoryComp{constructor(a_apiResponse){this.by=null;this.descendants=null;this.id=null;this.kids=[];this.score=null;this.time=null;this.title=null;this.type=null;this.url=null;for(const key of Object.keys(a_apiResponse)){this[key]=a_apiResponse[key]}this.siteUrl=`https://news.ycombinator.com/item?id=${this.id}`;this.dt=DateTime.fromSeconds(this.time);this.dtDiff=Dates.getDiffNow(this.dt)}/**
     * Generate the card html
     * @returns Story card html string
     */getCardHtml(){const url=this.url==null?this.siteUrl:this.url;const dtDisplay=Dates.getDiffDisplayString(this.dtDiff);// add commas to score and descendants
const scoreDisplay=this.score.toLocaleString();const descendantsDisplay=this.descendants.toLocaleString();let html=`
        <div class="${StoryComp.StoryItemClass} card ${StoryComp.StoryCardClass} custom-shadow" data-id=${this.id}>
            <div class="card-body">
                <h5 class="card-title"><a href="${url}" target="_blank" class="card-story-link">${this.title}</a></h5>
                <p class="text-muted"><small>${dtDisplay}</small></p>
                <p class="text-muted"><i class='bx bxs-user'></i>&nbsp;${this.by}</p>
            </div>
            <div class="card-footer px-4">
                <div class="d-flex align-baseline justify-content-between">
                    <span><i class='bx bx-like'></i>&nbsp;${scoreDisplay}</span>
                    <span><i class='bx bx-comment-detail'></i>&nbsp;${descendantsDisplay}</span>
                </div>
            </div>
        </div>`;return html}getListItemHtml(){const url=this.url==null?this.siteUrl:this.url;const dtDisplay=Dates.getDiffDisplayString(this.dtDiff);let html=`
        <li class="${StoryComp.StoryItemClass} ${StoryComp.StoryListItemClass} list-group-item" data-id=${this.id}>
            <h5 class="card-title"><a href="${url}" target="_blank" class="card-story-link">${this.title}</a></h5>
            <p class="text-muted"><small>${dtDisplay}</small></p>
            <p class="text-muted"><i class='bx bxs-user'></i>&nbsp;${this.by}</p>
            <div class="d-flex align-baseline">
                <span class="mr-3"><i class='bx bx-like'></i>&nbsp;${this.score}</span>
                <span><i class='bx bx-comment-detail'></i>&nbsp;${this.descendants}</span>
            </div>
        </li>`;return html}}_defineProperty(StoryComp,"StoryItemClass","story-item");_defineProperty(StoryComp,"StoryCardClass","story-item-card");_defineProperty(StoryComp,"StoryListItemClass","story-item-list-item");
function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}/**
 * Class to display the metadata for a story.
 */class StoryMeta{/**
     * Constructor
     * @param {number} a_iStoryID - story ID
     */constructor(a_iStoryID){_defineProperty(this,"loadAndDisplayData",async()=>{// fetch the story metadata
const storyApiResponse=await ApiWrapper.getStory(this.storyID);const storyComp=new StoryComp(storyApiResponse);// set the appropriate fields
this.title=storyComp.title;this.countComments=storyComp.descendants;this.countLikes=storyComp.score;this.date=storyComp.dt;this.dateDiff=storyComp.dtDiff;this.linkStory=storyComp.url;this.linkSite=storyComp.siteUrl;// now display it
this.displayData()});_defineProperty(this,"displayData",()=>{this.displayTitle();this.displayCountComments();this.displayCountLikes();this.displayDate();this.displayLinkStory();this.displayLinkSite()});_defineProperty(this,"displayTitle",()=>{if(this.title==null){return}$(StoryMeta.TITLE).text(this.title).removeClass("skeleton-text skeleton-effect-wave")});_defineProperty(this,"displayCountComments",()=>{if(this.countComments==null){return}const countCommentsText=`${this.countComments} comments`;$(StoryMeta.COUNT_COMMENTS).text(countCommentsText)});_defineProperty(this,"displayCountLikes",()=>{if(this.countLikes==null){return}const countLikesText=`${this.countLikes} likes`;$(StoryMeta.COUNT_LIKES).text(countLikesText)});_defineProperty(this,"displayDate",()=>{const dateDiffString=Dates.getDiffDisplayString(this.dateDiff);$(StoryMeta.DATE).text(dateDiffString)});_defineProperty(this,"displayLinkStory",()=>{this.setLink(this.linkStory,StoryMeta.LINK_STORY)});_defineProperty(this,"displayLinkSite",()=>{this.setLink(this.linkSite,StoryMeta.LINK_SITE)});_defineProperty(this,"setLink",(a_strValue,a_strSelector)=>{if(a_strValue==null){return}$(a_strSelector).attr("href",a_strValue);$(a_strSelector).removeClass("disabled")});this.storyID=a_iStoryID;// init everything to null before we fetch the data
this.title=null;this.countComments=null;this.countLikes=null;this.date=null;this.dateDiff=null;this.linkStory=null;this.linkSite=null}/**
     * Load the metadata then display it.
     */}_defineProperty(StoryMeta,"CONTAINER","#meta-container");_defineProperty(StoryMeta,"TITLE","#meta-title");_defineProperty(StoryMeta,"COUNT_COMMENTS","#meta-count-comments");_defineProperty(StoryMeta,"COUNT_LIKES","#meta-count-likes");_defineProperty(StoryMeta,"DATE","#meta-date");_defineProperty(StoryMeta,"LINK_STORY","#meta-link-story");_defineProperty(StoryMeta,"LINK_SITE","#meta-link-site");
class UrlParser{constructor(a_strUrl=null){if(a_strUrl==undefined||a_strUrl==null){this.url=window.location}this.queryString=window.location.search;this.urlParms=new URLSearchParams(this.queryString)}getQueryParm(a_strKey){return this.urlParms.get(a_strKey)}}
class Utilities{/**************************************************
    Enable the scroll button on the current page.
    ***************************************************/static enableJumpButton(){const className=".btn-scroll-top";$(className).on("click",function(){document.body.scrollTop=0;// For Safari
document.documentElement.scrollTop=0;// For Chrome, Firefox, IE and Opera
});const scrollBtn=$(className);$(window).on("scroll",function(){if(document.body.scrollTop>20||document.documentElement.scrollTop>20){$(scrollBtn).removeClass("d-none")}else{$(scrollBtn).addClass("d-none")}})}}
const eSortingSelect="#stories-sort-option";const eStoriesContainer="#stories-container";const eStoryItemClass=`.${StoryComp.StoryItemClass}`;const eViewSelection="stories-display-option";const mStories=new Stories(eStoriesContainer);/**************************************************
Main logic
***************************************************/$(document).ready(function(){showStoriesContainerSpinner();mStories.fetchTopStories(Stories.SORTING_TYPES.Default);addEventListeners();Utilities.enableJumpButton()});/**************************************************
Add all the event listeners
***************************************************/function addEventListeners(){$(eSortingSelect).on("change",function(){updateStorySorting()});$("body").on("click",eStoryItemClass,function(e){gotoStory(e)});$(`input[name='${eViewSelection}']`).on("change",function(e){updateStoriesView()})}/**************************************************
Update the stories sorting
***************************************************/function updateStorySorting(){const newSortingValue=parseInt($(eSortingSelect).find("option:checked").val());mStories.displayType=getStoriesViewInputValue();mStories.fetchTopStories(newSortingValue);showStoriesContainerSpinner()}/**************************************************
Show the spinner in the stories container
***************************************************/function showStoriesContainerSpinner(){let html=`
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border text-primary mt-5" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>`;$(eStoriesContainer).html(html)}/**************************************************
Depending on which part of the story card the user clicked,
go to either the comments section page, or the story url.
***************************************************/function gotoStory(e){if(e.target.className=="card-story-link"){return}const card=$(e.target).closest(eStoryItemClass);const storyID=$(card).attr("data-id");const url=`story.html?storyID=${storyID}`;window.open(url,"_blank")}/**************************************************
Update the story elements view (gallery or list).
***************************************************/function updateStoriesView(){showStoriesContainerSpinner();mStories.displayType=getStoriesViewInputValue();mStories.displayStories()}/**************************************************
Get the value of the checked stories view radio option.
***************************************************/function getStoriesViewInputValue(){return $(`input[name='${eViewSelection}']:checked`).val()}
const eMetaIDs={container:"#meta-container",title:"#meta-title",countComments:"#meta-count-comments",countLikes:"#meta-count-likes",date:"#meta-date",linkStory:"#meta-link-story",linkSite:"#meta-link-site"};const eCommentsContainer="#comments-list";const eComments={item:".comment-item",toggleButton:".comment-item-btn-toggle-thread",meta:".comment-item-meta",thread:".comment-item-thread",text:".comment-item-text",visibilityClass:"comment-item-hidden"};const mUrlParser=new UrlParser;const mStoryID=mUrlParser.getQueryParm("storyID");const mStoryMeta=new StoryMeta(mStoryID);let mStoryComments=new StoryComments(mStoryID,eMetaIDs.title);// main logic
$(document).ready(function(){mStoryMeta.loadAndDisplayData();mStoryComments.fetchStoryData();addListeners();Utilities.enableJumpButton()});/**
 * Add the event listeners to the page elements
 */function addListeners(){$(eCommentsContainer).on("click",eComments.toggleButton,function(e){e.preventDefault();toggleCommentVisibility(this)})}/**
 * Show/hide a comment thread actions
 */function toggleCommentVisibility(a_eCommentItemButton){const eComment=$(a_eCommentItemButton).closest(eComments.item);// toggle comment visibility
$(eComment).toggleClass(eComments.visibilityClass);// update the button text to show or hide
const btnText=$(eComment).hasClass(eComments.visibilityClass)?"Show":"Hide";$(a_eCommentItemButton).text(btnText)}
